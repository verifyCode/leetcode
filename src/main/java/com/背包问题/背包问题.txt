 一. 01背包问题
  dp[i][j]:表示前i个物品,总体积是j的情况下,总价值是多少
 1. 不选第i个物品: dp[i][j] = dp[i-1][j]
 2. 选第i个物品:dp[i-1][j-w[i]] + v[i]
 dp[i][j] = max{dp[i-1][j],dp[i-1][j-w[i]]+v[i]}
 ```
        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= C; j++) {
                //dp[i][j]   [0,i]的位置切容积为j的背包的最大值
                dp[i][j] = dp[i - 1][j];
                //容量要大于w[j] 即考虑的第i个物品,确实能放进背包中
                if (j >= w[i]) {
                    dp[i][j] = Math.max(dp[i][j], v[i] + dp[i - 1][j - w[i]]);
                }
            }
        }
```
3.优化空间复杂度
for(int i = 1; i < n; i ++){
    for(int j = C; j >)
}
4. 初始化细节问题
    1. 恰好装满背包时的最优解:dp[0]=0,dp[1~v]=Integer.MIN_VALUE;
 二. 完全背包问题
 1.